// Code generated by gen_legacy_tests.go; DO NOT EDIT.

package resamplerl_test

import (
	"errors"
	assert "github.com/stretchr/testify/assert"
	resamplerl "resampler/internal/resample/resamplerl"
	testutils "resampler/internal/test_utils"
	"testing"
)

type resampler8To16L struct {
	resampled []int16
}

func (resampler8To16L) Copy() testutils.TestResampler {
	return new(resampler8To16L)
}
func (resampler8To16L) String() string {
	return "8000_to_16000_resamplerL"
}
func (rsm *resampler8To16L) Resample(inp []int16) error {
	resamplerl.Resample8To16L(inp, rsm.resampled)
	return nil
}
func (rsm resampler8To16L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler8To16L) OutRate() int {
	return 16000
}
func (rsm resampler8To16L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample8To16L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 8000, 16000), testutils.TestResampler(&resampler8To16L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler11To8L struct {
	resampled []int16
}

func (resampler11To8L) Copy() testutils.TestResampler {
	return new(resampler11To8L)
}
func (resampler11To8L) String() string {
	return "11000_to_8000_resamplerL"
}
func (rsm *resampler11To8L) Resample(inp []int16) error {
	resamplerl.Resample11To8L(inp, rsm.resampled)
	return nil
}
func (rsm resampler11To8L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler11To8L) OutRate() int {
	return 8000
}
func (rsm resampler11To8L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample11To8L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 11000, 8000), testutils.TestResampler(&resampler11To8L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler11To16L struct {
	resampled []int16
}

func (resampler11To16L) Copy() testutils.TestResampler {
	return new(resampler11To16L)
}
func (resampler11To16L) String() string {
	return "11000_to_16000_resamplerL"
}
func (rsm *resampler11To16L) Resample(inp []int16) error {
	resamplerl.Resample11To16L(inp, rsm.resampled)
	return nil
}
func (rsm resampler11To16L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler11To16L) OutRate() int {
	return 16000
}
func (rsm resampler11To16L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample11To16L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 11000, 16000), testutils.TestResampler(&resampler11To16L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler16To8L struct {
	resampled []int16
}

func (resampler16To8L) Copy() testutils.TestResampler {
	return new(resampler16To8L)
}
func (resampler16To8L) String() string {
	return "16000_to_8000_resamplerL"
}
func (rsm *resampler16To8L) Resample(inp []int16) error {
	resamplerl.Resample16To8L(inp, rsm.resampled)
	return nil
}
func (rsm resampler16To8L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler16To8L) OutRate() int {
	return 8000
}
func (rsm resampler16To8L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample16To8L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 16000, 8000), testutils.TestResampler(&resampler16To8L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler44To8L struct {
	resampled []int16
}

func (resampler44To8L) Copy() testutils.TestResampler {
	return new(resampler44To8L)
}
func (resampler44To8L) String() string {
	return "44100_to_8000_resamplerL"
}
func (rsm *resampler44To8L) Resample(inp []int16) error {
	resamplerl.Resample44To8L(inp, rsm.resampled)
	return nil
}
func (rsm resampler44To8L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler44To8L) OutRate() int {
	return 8000
}
func (rsm resampler44To8L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample44To8L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 44100, 8000), testutils.TestResampler(&resampler44To8L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler44To16L struct {
	resampled []int16
}

func (resampler44To16L) Copy() testutils.TestResampler {
	return new(resampler44To16L)
}
func (resampler44To16L) String() string {
	return "44100_to_16000_resamplerL"
}
func (rsm *resampler44To16L) Resample(inp []int16) error {
	resamplerl.Resample44To16L(inp, rsm.resampled)
	return nil
}
func (rsm resampler44To16L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler44To16L) OutRate() int {
	return 16000
}
func (rsm resampler44To16L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample44To16L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 44100, 16000), testutils.TestResampler(&resampler44To16L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler48To8L struct {
	resampled []int16
}

func (resampler48To8L) Copy() testutils.TestResampler {
	return new(resampler48To8L)
}
func (resampler48To8L) String() string {
	return "48000_to_8000_resamplerL"
}
func (rsm *resampler48To8L) Resample(inp []int16) error {
	resamplerl.Resample48To8L(inp, rsm.resampled)
	return nil
}
func (rsm resampler48To8L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler48To8L) OutRate() int {
	return 8000
}
func (rsm resampler48To8L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample48To8L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 48000, 8000), testutils.TestResampler(&resampler48To8L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}

type resampler48To16L struct {
	resampled []int16
}

func (resampler48To16L) Copy() testutils.TestResampler {
	return new(resampler48To16L)
}
func (resampler48To16L) String() string {
	return "48000_to_16000_resamplerL"
}
func (rsm *resampler48To16L) Resample(inp []int16) error {
	resamplerl.Resample48To16L(inp, rsm.resampled)
	return nil
}
func (rsm resampler48To16L) OutLen() int {
	return len(rsm.resampled)
}
func (resampler48To16L) OutRate() int {
	return 16000
}
func (rsm resampler48To16L) Get(ind int) (int16, error) {
	if ind >= len(rsm.resampled) {
		return 0, errors.New("out of bounds")
	}
	return rsm.resampled[ind], nil
}
func TestResample48To16L(t *testing.T) {
	var tObj testutils.TestObj = testutils.TestObj{}.New(testutils.SinWave{}.New(0, 50, 48000, 16000), testutils.TestResampler(&resampler48To16L{}), 10, t)
	err := tObj.Run()
	if !assert.NoError(t, err, "failed to run resampler") {
		t.Error(err)
	}
	err = tObj.Save("latest/legacy")
	if !assert.NoError(t, err, "failed to save test results") {
		t.Error(err)
	}
}
